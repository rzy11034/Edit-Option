[/// | Delphi大纲式注释]
$(AttributesStart)
EnableMakros=true
!FileVersion=1
$(AttributesEnd)
/// <summary> | </summary>
[arr1 | 定义动态一维数组]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
$Param(VariableName): array of $Param(Type);|
[arrayc | array declaration (const)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
array[$param(0)..$param(1)] of $param(Type) = (|);
[arrayd | 定义静态一维数组(var)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
$Param(VariableName): array[0..$Param(HighNumber)] of $Param(Type);|
[b | begin end]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
begin
  |
end$AddSemicolon()
[be | begin end else begin end]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
begin
  |
end
else
begin

end$AddSemicolon()
[casee | case statement (with else)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
case $param(var) of
  : |;
  : ;
else ;
end$AddSemicolon()
[cases | case statement]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
case $param(var) of
  : |;
  : ;
end$AddSemicolon()
[classc | class declaration (with Create/Destroy overrides)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
T$Param(ClassName) = class($Param(TObject))
private

protected

public
  constructor Create; override;
  destructor Destroy; override;
  |
published

end;
[classd | class declaration (no parts)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
T$Param(ClassName) = class($Param(TObject))
|
end;
[classf | class declaration (all parts)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
T$Param(ClassName) = class($Param(TObject))
private

public
  constructor Create;
  destructor Destroy; override;
  |
end;
[constructor | constructor]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
constructor Create(|);
[destructor | destructor]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
destructor Destroy; override;
[forb | for statement]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
for $Param(CounterVar) := $Param(0) to $Param(Count) do
begin
  |
end$AddSemicolon()
[ford | for statement - (descending order)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
for $Param(CounterVar) := $Param(integer) downto $Param(0) do
begin
  |
end$AddSemicolon()
[fors | for (no begin/end)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
for $Param(CounterVar) := $Param(0) to $Param(Count) do
  |
[fpc | Conditional FPC Mode]
$(AttributesStart)
RemoveChar=true
EnableMakros=true
$(AttributesEnd)
{$IFDEF FPC}
  {$mode objfpc}{$H+}
{$ENDIF}
|
[function | function declaration]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
function $param(Name)($param( )): $param(Type);
begin
  |
end;
[generic | generic]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
generic

[hexc | HexStr(Cardinal(),8)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
HexStr(PtrUInt(|),8)
[ifb | if statement]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
if $Param(Conditional) then
begin
  |
end$AddSemicolon()
[ife | if then (no begin/end) else (no begin/end)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
if $Param(Conditional) then
  |
else
[ifeb | if then else]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
if $Param(Conditional) then
begin
  |
end
else
begin

end$AddSemicolon()
[ifs | if (no begin/end)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
if $Param(Conditional) then
  |
[inherited | inherited]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
inherited

[main | main]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
procedure Main;

implementation

procedure Main;
begin
  |
end;
[MSR | ModeSwitch advancedrecords]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
{$ModeSwitch advancedrecords}
[MSU | ModeSwitch unicodestrings]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
{$ModeSwitch unicodestrings}{$J-}
[object | Object Type]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
P$param(objName) = ^T$param(objName,sync=1);
T$Param(objName,sync=1) = object
private

public
  constructor Init();
  destructor Done;
  |
end$AddSemicolon()
[ofall | case of all enums]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
of
|$OfAll()end;
[pdrwd | property Double read write default]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name): Double read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1) default $Param(Const);|
[pdrws | property Double read write]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name): Double read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1);|
[pirwd | property Integer read write default]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name): Integer read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1) default $Param(Const);|
[pirws | property Integer read write]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name): Integer read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1);|
[pptgs | property  get set]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
property $param(Name): $param(Type) read __Get$param(Name,sync=1) write __Set$param(Name,sync=1);|
[pptrw | property read write]
$(AttributesStart)
EnableMakros=true
IgnoreForSelection=true
$(AttributesEnd)
property $param(Name): $param(Type) read _$param(Name,sync=1) write _$param(Name,sync=1);|
[procedure | procedure declaration]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
procedure $param(Name)($param( ));
begin
  |
end;
[prwd | property read write default]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name) read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1) default $Param(Const);|
[prws | property read write]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name) read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1);|
[psrw | property string read write]
$(AttributesStart)
!Version=1
EnableMakros=true
$(AttributesEnd)
property $Param(Name): string read $Param(Get)$Param(Name,sync=1) write $Param(Set)$Param(Name,sync=1);|
[raise | raise]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
raise Exception.Create('Error Message');

[records | record]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
P$param(objName) = ^T$param(RecordName,sync=1);
T$Param(objName,sync=1) = Record
private

public
  |
end$AddSemicolon()
[repeat | repeat]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
repeat
  |
until $param(var);
[sepb | //(*════════════════════════════════════*)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
//(*═══════════════════════════════════════════════════════════════════════
|
//═══════════════════════════════════════════════════════════════════════*)
[sepl | //══════════════════════════════════════]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
//═════════════════════════════════════════════════════════════════════════
[specialize | specialize]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
specialize
[todo | ToDo item creator]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
{ TODO -o$Param(Author) : $Param(Note) } |
[trycf | try finally (with Create/Free)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
$Param(VarName) := $Param(TMyClassName).Create($Param());
try
  |
finally
  $Param(VarName,Sync=1).Free;
end;
[trye | try except]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
try
  |
except

end$AddSemicolon()
[tryf | try finally]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
try
  |
finally
  $Param(FreeStatement,default)
end$AddSemicolon()
[w | writeln]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
writeln('$ProcedureName() '|)$AddSemicolon()
[whileb | while statement]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
while $Param(LoopCondition) do
begin
  |
end$AddSemicolon()
[whiles | while (no begin)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
while $Param(LoopCondition) do
  |
[withb | with statement]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
with $Param(Object) do
begin
  |
end$AddSemicolon()
[withc | with for components]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
with $Param(Object) do
begin
  Name:='$Param(NameText)';
  Parent:=Self;
  Left:=$Param(0);
  Top:=$Param(0);
  Width:=$Param(0);
  Height:=$Param(0);
  Caption:='$Param(CaptionText)';
end;
|
[withs | with (no begin)]
$(AttributesStart)
EnableMakros=true
RemoveChar=true
$(AttributesEnd)
with $Param(Object) do
  |
